{"version":3,"sources":["Chat.js","Message.js","App.js","index.js"],"names":["myId","Message","message","id","hour","minute","index","key","className","myUuid","uuid","socket","io","Chat","React","useState","setMessage","messages","setMessages","inputRef","useRef","messagesBox","useEffect","window","localStorage","getItem","setItem","messagesStorage","JSON","parse","setTimeout","current","scrollTo","scrollHeight","focus","on","newMessage","stringify","off","ref","map","onSubmit","event","preventDefault","trim","emit","type","placeholder","value","onChange","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAQIA,E,kFCUWC,EAhBC,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,GAAIC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,OAAQL,EAAkB,EAAlBA,KAAMM,EAAY,EAAZA,MAClD,OACE,yBACEC,IAAKD,EACLE,UAAS,kBAAaL,IAAOH,EAAO,eAAiB,kBAErD,2BACGE,EACD,8BACGE,EADH,IACUC,MDPZI,E,MAASC,KAGTC,EAASC,IAAG,2CAyFHC,EAtFF,WAAO,IAAD,EACaC,IAAMC,SAAS,IAD5B,mBACVb,EADU,KACDc,EADC,OAEeF,IAAMC,SAAS,IAF9B,mBAEVE,EAFU,KAEAC,EAFA,KAIXC,EAAWL,IAAMM,SACjBC,EAAcP,IAAMM,SAE1BN,IAAMQ,WAAU,YACdtB,EAAOuB,OAAOC,aAAaC,QAAQ,SAKjCzB,EAAOuB,OAAOC,aAAaC,QAAQ,SAHnCF,OAAOC,aAAaE,QAAQ,OAAQjB,GACpCT,EAAOS,KAIR,IAEHK,IAAMQ,WAAU,WACd,IAAIK,EAAkBJ,OAAOC,aAAaC,QAAQ,YAC9CE,GACFT,EAAYU,KAAKC,MAAMF,MAExB,IAEHb,IAAMQ,WAAU,WACdQ,YAAW,WACTT,EAAYU,QAAQC,SAAS,EAAGX,EAAYU,QAAQE,mBAErD,IAEHnB,IAAMQ,WAAU,WACdH,EAASY,QAAQG,QAEjBvB,EAAOwB,GAAG,gBAAgB,SAACjC,GACzB,IAAIkC,EAAU,sBAAOnB,GAAP,CAAiBf,IAC/BgB,EAAYkB,GACZb,OAAOC,aAAaE,QAAQ,WAAYE,KAAKS,UAAUD,IAEnDlC,EAAQC,KAAOH,GACjBqB,EAAYU,QAAQC,SAAS,EAAGX,EAAYU,QAAQE,cAEtDtB,EAAO2B,IAAI,qBAEZ,CAACrB,IAaJ,OACE,6BAAST,UAAU,aACjB,yBAAKA,UAAU,YACb,yBAAKA,UAAU,KAAK+B,IAAKlB,GACtBJ,EAASuB,KAAI,WAAgClC,GAAhC,IAAGJ,EAAH,EAAGA,QAASC,EAAZ,EAAYA,GAAIC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,OAAtB,OACZ,kBAAC,EAAD,CACEH,QAASA,EACTC,GAAIA,EACJC,KAAMA,EACNC,OAAQA,EACRC,MAAOA,EACPN,KAAMA,SAMd,0BAAMyC,SA5BW,SAACC,GACpBA,EAAMC,iBACFzC,EAAQ0C,SACVjC,EAAOkC,KAAK,eAAgB,CAC1B1C,GAAIH,EACJE,YAEFc,EAAW,OAsBT,2BACE8B,KAAK,OACLC,YAAY,sBACZC,MAAO9C,EACP+C,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBlC,EAAWkC,EAAOF,QAC5CT,IAAKpB,OEjFAgC,MAJf,WACE,OAAO,kBAAC,EAAD,OCDTC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.2bbb02ce.chunk.js","sourcesContent":["import React from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport uuid from \"uuid/v4\";\r\nimport Message from \"./Message\";\r\nconst myUuid = uuid();\r\n\r\n//This is my public API for test.\r\nconst socket = io(\"https://api-chat-ted2370.herokuapp.com/\"); //Change to your URL Chat-Server.\r\nlet myId;\r\n\r\nconst Chat = () => {\r\n  const [message, setMessage] = React.useState(\"\");\r\n  const [messages, setMessages] = React.useState([]);\r\n\r\n  const inputRef = React.useRef();\r\n  const messagesBox = React.useRef();\r\n\r\n  React.useEffect(() => {\r\n    myId = window.localStorage.getItem(\"myid\");\r\n    if (!myId) {\r\n      window.localStorage.setItem(\"myid\", myUuid);\r\n      myId = myUuid;\r\n    } else {\r\n      myId = window.localStorage.getItem(\"myid\");\r\n    }\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    let messagesStorage = window.localStorage.getItem(\"messages\");\r\n    if (messagesStorage) {\r\n      setMessages(JSON.parse(messagesStorage));\r\n    }\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    setTimeout(() => {\r\n      messagesBox.current.scrollTo(0, messagesBox.current.scrollHeight);\r\n    });\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    inputRef.current.focus();\r\n\r\n    socket.on(\"chat message\", (message) => {\r\n      let newMessage = [...messages, message];\r\n      setMessages(newMessage);\r\n      window.localStorage.setItem(\"messages\", JSON.stringify(newMessage));\r\n\r\n      if (message.id === myId) {\r\n        messagesBox.current.scrollTo(0, messagesBox.current.scrollHeight);\r\n      }\r\n      socket.off(\"chat message\");\r\n    });\r\n  }, [messages]);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (message.trim()) {\r\n      socket.emit(\"chat message\", {\r\n        id: myId,\r\n        message,\r\n      });\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"container\">\r\n      <div className=\"messages\">\r\n        <div className=\"bg\" ref={messagesBox}>\r\n          {messages.map(({ message, id, hour, minute }, index) => (\r\n            <Message\r\n              message={message}\r\n              id={id}\r\n              hour={hour}\r\n              minute={minute}\r\n              index={index}\r\n              myId={myId}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Digite uma mensagem\"\r\n          value={message}\r\n          onChange={({ target }) => setMessage(target.value)}\r\n          ref={inputRef}\r\n        />\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\n\r\nconst Message = ({ message, id, hour, minute, myId, index }) => {\r\n  return (\r\n    <div\r\n      key={index}\r\n      className={`message ${id === myId ? \"message_self\" : \"message_other\"}`}\r\n    >\r\n      <p>\r\n        {message}\r\n        <span>\r\n          {hour}:{minute}\r\n        </span>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Chat from \"./Chat\";\n\nfunction App() {\n  return <Chat />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}